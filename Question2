class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class LinkedListCycle:
    def detectCycle(self, head):
        if head is None or head.next is None:
            return None

        slow = head
        fast = head

        while fast is not None and fast.next is not None:
            slow = slow.next
            fast = fast.next.next

            if slow == fast:
                break

        if fast is None or fast.next is None:
            return None

        slow = head

        while slow != fast:
            slow = slow.next
            fast = fast.next

        return slow

solution = LinkedListCycle()

head = ListNode(3)
head.next = ListNode(2)
head.next.next = ListNode(0)
head.next.next.next = ListNode(-4)
head.next.next.next.next = head.next  # Create a cycle

cycleStart = solution.detectCycle(head)
if cycleStart is not None:
    print("Cycle starts at node with value: " + str(cycleStart.val))
else:
    print("No cycle detected.")

